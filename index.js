const login = require("facebook-chat-api");
const fs = require("fs");
const googleTTS = require('google-tts-api');
const https = require('https');
const ytdl = require('ytdl-core');
const moment = require('moment-timezone');
const googleIt = require('google-it');
const { timeout } = require("puppeteer-core");

let randomMessageEnabled = {};

let userPoints = {};

let xoBoards = {};

const appState = require('prompt-sync')()('Enter your cookie: ');

function generateRandomString() {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 8; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
  }

fs.readFile("point.txt", "utf8", (err, data) => {
    if (err) {
        console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå point.txt:", err);
        return;
    }

    const lines = data.split("\n").filter(line => line.trim() !== "");
    lines.forEach(line => {
        const [user, point] = line.split(",");
        userPoints[user] = parseInt(point) || 0;
    });

    fs.readFile("threadID.txt", "utf8", (err, data) => {
        if (err) {
            console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå threadID:", err);
            return;
        }
        let allowedThreadIDs = data.split("\n").map(id => id.trim()).filter(id => id !== "");

        login({ appState: JSON.parse(appState) }, (err, api) => {
            if (err) return console.error(err);
            console.clear();
            fs.writeFileSync('appstate.json', appState);
            var colors = require('colors');
            console.log(`Credit:`.underline.white);
            console.log(`‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ÄÉ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ÄÉ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ÄÉ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó`.blue);
            console.log(`‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù`.blue);
            console.log(`‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ÄÉ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ÄÉ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ÄÉ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë`.blue);
            console.log(`‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ÄÉ‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ÄÉ‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó`.blue);
            console.log(`‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ÄÉ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù`.blue);
            console.log(`‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ÄÉ‚ïö‚ïê‚ïù‚ÄÉ‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ÄÉ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ÄÉ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ÄÉ‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ÄÉ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë`.blue);
            console.log('Login Sussecc\n'.rainbow);
            console.log('Bot ID: ', api.getCurrentUserID());
            api.listenMqtt((err, message) => {
                const ttt = generateRandomString();
                if (err) return console.error(err);
                if (message && message.body) {
                    if (message && message.body && allowedThreadIDs.includes(message.threadID) && message.body.startsWith("/yt") || message && message.body && allowedThreadIDs.includes(message.threadID) && message.body.startsWith("/YT") || message && message.body && allowedThreadIDs.includes(message.threadID) && message.body.startsWith("/Yt") || message && message.body && allowedThreadIDs.includes(message.threadID) && message.body.startsWith("/yT")) {
                        const videoUrl = message.body.slice(4).trim();
                        const options = {
                          quality: 'lowestaudio', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                          filter: 'audioonly', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        };
                        if (videoUrl.startsWith("https://youtu.be")) {
                            api.setMessageReaction("üëç", message.messageID);
                            api.sendMessage(ttt+"\n"+"‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á 1-10 ‡∏ô‡∏≤‡∏ó‡∏µ", message.threadID, message.messageID);
                            const outputFile = 'mp3.mp3';
                            const output = fs.createWriteStream(outputFile);
                            ytdl(videoUrl, options)
                            .pipe(output)
                            .on('finish', () => {
                                api.sendMessage({ attachment: fs.createReadStream(outputFile) }, message.threadID, () => {
                                fs.unlinkSync(outputFile);
                                });
                            })
                            .on('error', (error) => {
                                api.setMessageReaction("üëé", message.messageID);
                                console.error(ttt+"\n"+'\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', error);
                                api.sendMessage(ttt+"\n"+`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${error}`, message.threadID, message.messageID);
                            });
                        } else {
                            api.setMessageReaction("üëé", message.messageID);
                            api.sendMessage(ttt+"\n"+"‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å ùêòùê®ùêÆùê≠ùêÆùêõùêû", message.threadID, message.messageID);
                        }
                    }
                    if (message.body == message.body) {
                        message.body = message.body.toLowerCase();
                        if (message.body.toLowerCase() == "id") {
                            api.sendMessage(ttt+"\n"+message.senderID, message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                        } else if (message.body.toLowerCase() == "groupid" || message.body.toLowerCase() == "gid") {
                            api.sendMessage(ttt+"\n"+message.threadID, message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                        } else if (message.body.startsWith("addid") && message.senderID === "100033015680359") {
                            const userCommand = message.body.split(" ");
                            if (userCommand[0] === "addid" && userCommand.length > 1) {
                                const newText = userCommand.slice(1).join(" ").trim();
                                appendAndSaveTextToFileid(newText, api, message)
                                    .then(successMessage => {
                                        if (!message.sent) {
                                            allowedThreadIDs.push(newText);
                                            api.sendMessage(ttt+"\n"+`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°\n‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏ü‡∏™‡∏ö‡∏∏‡πä‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ñ‡∏£‡∏±‡∏ö\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏ö‡∏≠‡∏ó" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`, newText)
                                            api.sendMessage(successMessage, message.threadID, message.messageID);
                                            api.setMessageReaction("üëç", message.messageID);
                                        }
                                    })
                                    .catch(error => {
                                        if (!message.sent) {
                                            api.sendMessage(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ò‡∏£‡∏î ID: " + error.message, message.threadID, message.messageID);
                                            api.setMessageReaction("üëé", message.messageID);
                                        }
                                    });
                            }
                        } else if (message.body.startsWith("delid") && message.senderID === "100033015680359") {
                            if (message.senderID !== "100033015680359") {
                                api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà Admin", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            }
                            const userCommand = message.body.split(" ");
                            if (userCommand[0] === "delid" && userCommand.length > 1) {
                                const wordToDelete = userCommand.slice(1).join(" ").trim();
                                deleteWordFromFileid(wordToDelete, api, message)
                                    .then(successMessage => {
                                        if (!message.sent) {
                                            allowedThreadIDs = allowedThreadIDs.filter(id => id !== wordToDelete);
                                            api.sendMessage(ttt+"\n"+`‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà`, wordToDelete)
                                            api.sendMessage(successMessage, message.threadID, message.messageID);
                                            api.setMessageReaction("üëç", message.messageID);
                                        }
                                    })
                                    .catch(error => {
                                        if (!message.sent) {
                                            api.sendMessage(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ò‡∏£‡∏î ID: " + error.message, message.threadID, message.messageID);
                                            api.setMessageReaction("üëé", message.messageID);
                                        }
                                    });
                            }
                        } else if (message.body.startsWith("addid") && message.senderID !== "100033015680359") {
                            api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà ùêÄùêùùê¶ùê¢ùêß", message.threadID, message.messageID);
                            api.setMessageReaction("üëé", message.messageID);
                        } else if (message.body.startsWith("delid") && message.senderID !== "100033015680359") {
                            api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà ùêÄùêùùê¶ùê¢ùêß", message.threadID, message.messageID);
                            api.setMessageReaction("üëé", message.messageID);
                        } else if (message.body.startsWith("addpoint") && message.senderID === "100033015680359") {
                            const userId = message.body.split(" ")[1];
                            const pointsToAdd = parseInt(message.body.split(" ")[2]);
                            if (!userId || isNaN(pointsToAdd)) {
                                api.setMessageReaction("üëé", message.messageID);
                                api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ùêÄùêùùêùùê©ùê®ùê¢ùêßùê≠ [ùêàùêÉ] [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]", message.threadID, message.messageID);
                            } else {
                                if (!userPoints[userId]) {
                                    userPoints[userId] = pointsToAdd;
                                } else {
                                    userPoints[userId] += pointsToAdd;
                                }
                                saveUserPoints();
                                api.setMessageReaction("üëç", message.messageID);
                                api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ${pointsToAdd} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                            }
                        } else if (message.body.startsWith("delpoint") && message.senderID === "100033015680359") {
                            const userId = message.body.split(" ")[1];
                            const pointsToRemove = parseInt(message.body.split(" ")[2]);
                            if (!userId || isNaN(pointsToRemove)) {
                                api.setMessageReaction("üëé", message.messageID);
                                api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ùêÉùêûùê•ùê©ùê®ùê¢ùêßùê≠ [ùêàùêÉ] [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]", message.threadID, message.messageID);
                            } else {
                                if (!userPoints[userId]) {
                                    api.setMessageReaction("üëé", message.messageID);
                                    api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`, message.threadID, message.messageID);
                                } else {
                                    userPoints[userId] -= pointsToRemove;
                                    if (userPoints[userId] < 0) {
                                        userPoints[userId] = 0;
                                    }
                                    saveUserPoints();
                                    api.setMessageReaction("üëç", message.messageID);
                                    api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏õ ${pointsToRemove} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                }
                            }
                        } else if (message.body.startsWith("addpoint") || message.body.startsWith("delpoint")) {
                            api.setMessageReaction("üëé", message.messageID);
                            api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà ùêÄùêùùê¶ùê¢ùêß", message.threadID, message.messageID);
                        }
                    }
                }
                if (message && message.body && allowedThreadIDs.includes(message.threadID)) {
                    if (isLink(message.body)) {
                    } else {
                        message.body = message.body.toLowerCase();
                        if (message.body == "#‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û") {
                            message.body = "#bangkok";
                        }
                        if (message.body.toLowerCase().startsWith("#")) {
                            const city = message.body.slice(1).trim();
                            getWeatherData(city)
                                .then(weatherData => {
                                    if (weatherData !== null) {
                                        const responseMessage = createResponseMessage(weatherData);
                                        api.sendMessage(responseMessage, message.threadID, message.messageID);
                                        api.setMessageReaction("üëç", message.messageID);
                                    } else {
                                        api.sendMessage(ttt+"\n"+`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏ô ${city} ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`, message.threadID, message.messageID);
                                        api.setMessageReaction("üëé", message.messageID);
                                    }

                                });
                        } else if (message.body.startsWith("$")) {
                            const count = parseInt(message.body.slice(1).trim());
                            if (!isNaN(count) && count >= 1 && count <= 100) {
                                const randomNumbers = generateRandomNumbers(count);
                                const response = ttt+"\n"+`‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° ${count} ‡∏ï‡∏±‡∏ß: ${randomNumbers.join('')}`;
                                api.sendMessage(response, message.threadID, message.messageID);
                                api.setMessageReaction("üëç", message.messageID);
                            } else {
                                api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 100", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            }
                        } else if (message.body == "help" || message.body == "‡∏ö‡∏≠‡∏ó" || message.body == "bot") {
                            const helpMessage = ttt+"\n"+`üí¨ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üí¨\n\nüåê ùêáùêûùê•ùê© | ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\nüìõ ùêàùêÉ | ‡∏î‡∏π ID ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á\n\nüßµ ùêÜùê´ùê®ùêÆùê©ùêàùêÉ | ‡∏î‡∏π ID ‡πÄ‡∏ò‡∏£‡∏î\n\n‚òÅÔ∏è #[‡πÄ‡∏°‡∏∑‡∏≠‡∏á,‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®,‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î] | ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®\n\n‚ûó ?[‡πÄ‡∏•‡∏Ç][+,-,*,/][‡πÄ‡∏•‡∏Ç] | ‡∏ö‡∏ß‡∏Å‡∏•‡∏ö‡∏Ñ‡∏π‡∏ì‡∏´‡∏≤‡∏£\n\nüî¢ $[ùüè-ùüèùüéùüé] | ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 1-100 ‡∏´‡∏•‡∏±‡∏Å\n\nüë∑ ùêÇùê´ùêûùêùùê¢ùê≠ | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á\n\nüì© ^[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] | ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ Admin\n\n\n\nüì¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á üì¢\n\nüîä /ùêí [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢\n\nüé§ /ùêòùêì [‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏¢‡∏π‡∏ó‡∏π‡∏õ] | ‡∏î‡∏∂‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏π‡∏ó‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤\n\n\n\nü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏ô ü§ñ\n\nüî¥ ùêéùêßùêõùê®ùê≠ | ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡πà‡∏≤\n\nüü¢ ùêéùêüùêüùêõùê®ùê≠ | ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡πà‡∏≤\n\n‚ûï ùêÄùêùùêù [‡∏Ñ‡∏≥‡∏î‡πà‡∏≤] | ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏î‡πà‡∏≤\n\n‚ûñ ùêÉùêûùê• [‡∏Ñ‡∏≥‡∏î‡πà‡∏≤] | ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏î‡πà‡∏≤\n\n\n\nüéÆ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏° üéÆ\n\nüéÆ ùêóùêé | ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° XO\n\n\n\nüí∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô üí∞\n\nüë§ !ùêîùê¨ùêûùê´ | ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n\nüëÄ !ùêè [ùêàùêÉ] | ‡∏î‡∏π‡∏û‡πâ‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á ID ‡∏ô‡∏±‡πâ‡∏ô‡πÜ\n\nüé∞ !ùêí [ùüì-ùüìùüé] | ‡∏õ‡∏±‡πà‡∏ô‡∏™‡∏•‡πá‡∏≠‡∏ï‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô 4 ‡πÄ‡∏ó‡πà‡∏≤\n\nüêì !ùêÇ [ùüì-ùüìùüé] | ‡∏ï‡∏µ‡πÑ‡∏Å‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤\n\nüÉè !ùêÅ [ùêè|ùêì|ùêÅ] [ùüì-ùüìùüé] | ‡∏•‡∏á‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤‡∏ä‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤ ‡∏•‡∏á‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏π‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô 8 ‡πÄ‡∏ó‡πà‡∏≤`;
                            api.sendMessage(helpMessage, message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                        } else if (message.body == "‡∏ö‡∏≠‡∏ó‡∏î‡∏µ" || message.body == "‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏á" || message.body == "‡∏ö‡∏≠‡∏ó‡πÄ‡∏ü‡∏µ‡πâ‡∏¢‡∏ß" || message.body == "‡∏ö‡∏≠‡∏ó‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å" || message.body == "good bot") {
                            api.sendMessage(ttt+"\n"+"‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏°‡πÜ‡πÄ‡∏Ç‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏∞", message.threadID, message.messageID);
                            api.setMessageReaction("üòç", message.messageID);
                        } else if (message.body.toLowerCase() == "id" || message.body.toLowerCase() == "groupid" || message.body.toLowerCase() == "addid" || message.body.toLowerCase() == "delid" || message.body.toLowerCase() == "delpoint" || message.body.toLowerCase() == "addpoint") {

                        } else if (message.body.startsWith("add")) {
                            const userCommand = message.body.split(" ");
                            if (userCommand[0] === "add" && userCommand.length > 1) {
                                const newText = userCommand.slice(1).join(" ").trim();
                                appendAndSaveTextToFile(newText, api, message)
                                    .then(successMessage => {
                                        if (!message.sent) {
                                            api.sendMessage(successMessage, message.threadID, message.messageID);
                                            api.setMessageReaction("üëç", message.messageID);
                                        }
                                    })
                                    .catch(error => {
                                        if (!message.sent) {
                                            api.sendMessage(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: " + error.message, message.threadID, message.messageID);
                                            api.setMessageReaction("üëé", message.messageID);
                                        }
                                    });
                            }
                        } else if (message.body.startsWith("del")) {
                            const userCommand = message.body.split(" ");
                            if (userCommand[0] === "del" && userCommand.length > 1) {
                                const wordToDelete = userCommand.slice(1).join(" ").trim();
                                deleteWordFromFile(wordToDelete, api, message)
                                    .then(successMessage => {
                                        if (!message.sent) {
                                            api.sendMessage(ttt+"\n"+successMessage, message.threadID, message.messageID);
                                            api.setMessageReaction("üëç", message.messageID);
                                        }
                                    })
                                    .catch(error => {
                                        if (!message.sent) {
                                            api.sendMessage(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥: " + error.message, message.threadID, message.messageID);
                                            api.setMessageReaction("üëé", message.messageID);
                                        }
                                    });
                            }
                        } else if (message.body == "onbot") {
                            randomMessageEnabled[message.threadID] = true;
                            api.sendMessage(ttt+"\n"+"üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß", message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                        } else if (message.body == "offbot") {
                            randomMessageEnabled[message.threadID] = false;
                            api.sendMessage(ttt+"\n"+"üî¥ ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏î‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß", message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                        } else if (message.body.startsWith("?")) {
                            const regex = /^\?(\d+)([+\-*\/])(\d+)/;
                            const match = message.body.match(regex);
                            if (match) {
                                const operator = match[2];
                                const numbers = [parseInt(match[1]), parseInt(match[3])];
                                const result = calculate(numbers[0], numbers[1], operator);
                                api.sendMessage(`${result}`, message.threadID, message.messageID);
                                api.setMessageReaction("üëç", message.messageID);
                            } else {
                                api.sendMessage(ttt+"\n"+"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            }
                        } else if (message.body.startsWith("/s")) {
                            const textToSpeak = message.body.slice(3).trim();
                            if (textToSpeak.length > 200) {
                                api.sendMessage(ttt+"\n"+"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î 200 ‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß " + textToSpeak.length + " ‡∏≠‡∏±‡∏Å‡∏©‡∏£", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            } else {
                                api.sendMessage(ttt+"\n"+"‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà", message.threadID, message.messageID);
                                textToSpeech0(textToSpeak, api, message.threadID, message.messageID);
                                api.setMessageReaction("üëç", message.messageID);
                            }
                        } else if (message.body.startsWith("!s")) {
                            const userId = message.senderID;
                            const fileData = fs.readFileSync("point.txt", "utf8");
                            const lines = fileData.split("\n");
                            const userExists = lines.some(line => line.startsWith(`${userId},`));
                        
                            if (!userExists) {
                                api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '!ùêîùê¨ùêûùê´' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            } else {
                                const betAmount = parseInt(message.body.split(" ")[1]);
                                if (betAmount < 5 || betAmount > 50 || isNaN(betAmount)) {
                                    api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 5 ‡∏ñ‡∏∂‡∏á 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else if (userPoints[userId] < betAmount) {
                                    api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else {
                                    api.setMessageReaction("üëç", message.messageID);
                                    var zyren = ["üçá", "üçâ", "üçé", "üçí", "üçì"];
                                    emojiresult1 = zyren[Math.floor(Math.random() * zyren.length)];
                                    emojiresult2 = zyren[Math.floor(Math.random() * zyren.length)];
                                    emojiresult3 = zyren[Math.floor(Math.random() * zyren.length)];
                                    emojiresult4 = zyren[Math.floor(Math.random() * zyren.length)];
                                    randomwin = Math.floor(Math.random() * 10);
                                    if (randomwin > 8) {
                                        api.sendMessage(ttt+"\n"+"‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏°‡∏ä‡∏ä‡∏µ‡∏ô :\n | " + emojiresult1 + " | " + emojiresult1 + " | " + emojiresult1 + " | " + emojiresult1 + " |", message.threadID);
                                        userPoints[userId] += betAmount * 3;
                                        saveUserPoints();
                                        api.sendMessage(ttt+"\n"+`‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${betAmount * 3} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, message.threadID);
                                    } else if (emojiresult1 == emojiresult2 && emojiresult2 == emojiresult3 && emojiresult3 == emojiresult4) {
                                        api.sendMessage(ttt+"\n"+"‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏°‡∏ä‡∏ä‡∏µ‡∏ô :\n | " + emojiresult1 + " | " + emojiresult1 + " | " + emojiresult1 + " | " + emojiresult1 + " |", message.threadID);
                                        userPoints[userId] += betAmount * 3;
                                        saveUserPoints();
                                        api.sendMessage(ttt+"\n"+`‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${betAmount * 3} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, message.threadID);
                                    } else {
                                        api.sendMessage(ttt+"\n"+"‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏°‡∏ä‡∏ä‡∏µ‡∏ô :\n | " + emojiresult1 + " | " + emojiresult2 + " | " + emojiresult3 + " | " + emojiresult4 + " |", message.threadID);
                                        userPoints[userId] -= betAmount;
                                        saveUserPoints();
                                        api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ\n‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ ${betAmount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏ï‡∏≤‡∏î‡∏π`, message.threadID);
                                    }
                                }
                            }
                        } else if (message.body == "cr." || message.body == "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" || message.body == "credit" || message.body == "cr") {
                            api.setMessageReaction("üëç", message.messageID);
                            api.sendMessage({
                                body: "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á\n" + "NINESOS", 
                                mentions: [{tag: "NINESOS", id: 100033015680359}]
                            }, message.threadID);
                        } else if (message.body.startsWith("!user")) {
                            const userId = message.senderID;
                            const fileData = fs.readFileSync("point.txt", "utf8");
                            const lines = fileData.split("\n");
                            const userExists = lines.some(line => line.startsWith(`${userId},`));
                        
                            if (!userExists) {
                                userPoints[userId] = 0;
                                saveUserPoints();
                                api.setMessageReaction("üëç", message.messageID);
                                api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                            } else {
                                api.setMessageReaction("üëé", message.messageID);
                                api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                            }
                        } else if (message.body.startsWith("!p")) {
                            const userId = message.body.split(" ")[1];
                            if (userId) {
                                const fileData = fs.readFileSync("point.txt", "utf8");
                                const lines = fileData.split("\n");
                                const userExists = lines.some(line => line.startsWith(`${userId},`));
                        
                                if (userExists) {
                                    const userPoint = userPoints[userId] || 0;
                                    api.setMessageReaction("üëç", message.messageID);
                                    api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${userPoint} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                } else {
                                    api.setMessageReaction("üëé", message.messageID);
                                    api.sendMessage(ttt+"\n"+`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                }
                            } else {
                                api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ùêàùêÉ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", message.threadID, message.messageID);
                            }
                        } else if (message.body.startsWith("!c")) {
                            const userId = message.senderID;
                            const fileData = fs.readFileSync("point.txt", "utf8");
                            const lines = fileData.split("\n");
                            const userExists = lines.some(line => line.startsWith(`${userId},`));
                        
                            if (!userExists) {
                                api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '!ùêîùê¨ùêûùê´' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            } else {
                                const betAmount = parseInt(message.body.split(" ")[1]);
                                if (betAmount < 5 || betAmount > 50 || isNaN(betAmount)) {
                                    api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 5 ‡∏ñ‡∏∂‡∏á 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else if (userPoints[userId] < betAmount) {
                                    api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else {
                                    const result = Math.random();
                                    if (result < 0.4) {
                                        userPoints[userId] += betAmount;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡πÑ‡∏Å‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${betAmount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    } else if (result === 0.4) {
                                        userPoints[userId] -= betAmount / 2;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡πÑ‡∏Å‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠!\n‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô ${betAmount / 2} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    } else {
                                        userPoints[userId] -= betAmount;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡πÑ‡∏Å‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ\n‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ ${betAmount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    }
                                }
                            }
                        } else if (message.body.startsWith("!b")) {
                            const userId = message.senderID;
                            const fileData = fs.readFileSync("point.txt", "utf8");
                            const lines = fileData.split("\n");
                            const args = message.body.split(" ");
                            const userExists = lines.some(line => line.startsWith(`${userId},`));

                            if (args.length !== 3 || (args[1] !== "p" && args[1] !== "b" && args[1] !== "t") || isNaN(parseInt(args[2]))) {
                                api.sendMessage(ttt+"\n"+"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '!ùêÅ [ùêè|ùêì|ùêÅ] [ùüì-ùüìùüé]'", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                                return;
                            }
                        
                            if (!userExists) {
                                api.sendMessage(ttt+"\n"+"‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '!ùêîùê¨ùêûùê´' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô", message.threadID, message.messageID);
                                api.setMessageReaction("üëé", message.messageID);
                            } else {
                                const betAmount = parseInt(args[2]);
                                if (betAmount < 5 || betAmount > 50 || isNaN(betAmount)) {
                                    api.sendMessage(ttt+"\n"+"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 5 ‡∏ñ‡∏∂‡∏á 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else if (userPoints[userId] < betAmount) {
                                    api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    api.setMessageReaction("üëé", message.messageID);
                                } else {
                                    const p = Math.floor(Math.random() * 10);
                                    const b = Math.floor(Math.random() * 10);

                                    api.sendMessage(`P: ${p}\nB: ${b}`, message.threadID,  message.messageID);
                                    
                                    if (args[1] === "p" && p > b || args[1] === "b" && p < b || args[1] === "b" && b > p || args[1] === "p" && b < p) {
                                        userPoints[userId] += betAmount;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${betAmount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, message.threadID, message.messageID);
                                    } else if (args[1] === "b" && b < p || args[1] === "p" && b > p  || args[1] === "b" && p > b || args[1] === "p" && p < b || args[1] === "t" && b < p || args[1] === "t" && b > p) {
                                        userPoints[userId] -= betAmount;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ\n‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ ${betAmount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, message.threadID, message.messageID);
                                    } else if (args[1] === "t" && b == p || args[1] === "t" && p == b) {
                                        userPoints[userId] += betAmount * 7;
                                        saveUserPoints();
                                        api.setMessageReaction("üëç", message.messageID);
                                        api.sendMessage(ttt+"\n"+`‡πÅ‡∏à‡πá‡∏Å‡∏û‡πá‡∏≠‡∏ï!!!\n‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${betAmount * 7} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${userPoints[userId]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, message.threadID, message.messageID);
                                    }
                                }
                            }
                        } else if (message.body.startsWith("^")) {
                            const text = message.body.slice(1).trim();
                            api.sendMessage(ttt+"\n"+"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", message.threadID, message.messageID);
                            api.setMessageReaction("üëç", message.messageID);
                            api.sendMessage({
                                body: ttt+"\n"+"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + "USER" + "\n\n" +text, 
                                mentions: [{tag: "USER", id: message.senderID}]
                            }, 7687946187893875);
                        } else if (message.body.toLowerCase() === "xo") {
                            const threadID = message.threadID;
                            if (!xoBoards[threadID]) {
                                xoBoards[threadID] = {
                                    board: ["", "", "", "", "", "", "", "", ""],
                                    turn: "ùêó",
                                    moveCount: 0
                                };
                                const boardStr = renderBoard(xoBoards[threadID].board);
                                api.setMessageReaction("üëç", message.messageID);
                                api.sendMessage(ttt+"\n"+`‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ùêóùêé ‡πÉ‡∏´‡∏°‡πà\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ùêóùêé [ùüè-ùüó] | ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á\n\n‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á ùêó\n\n${boardStr}`, threadID);
                            } else {
                                api.sendMessage(ttt+"\n"+"‡πÄ‡∏Å‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", threadID);
                            }
                        } else if (message.body.toLowerCase().match(/^xo \d$/)) {
                            api.setMessageReaction("üëç", message.messageID);
                            const threadID = message.threadID;
                            const moveIndex = parseInt(message.body.slice(3)) - 1;
                            if (xoBoards[threadID] && xoBoards[threadID].board[moveIndex] === "") {
                                xoBoards[threadID].board[moveIndex] = xoBoards[threadID].turn;
                                xoBoards[threadID].moveCount++;
                                const winner = getWinner(xoBoards[threadID].board);
                                if (winner) {
                                    const boardStr = ren
                                    derBoard(xoBoards[threadID].board);
                                    api.sendMessage(ttt+"\n"+`${winner} ‡∏ä‡∏ô‡∏∞!\n\n${boardStr}`, threadID);
                                    delete xoBoards[threadID];
                                } else if (xoBoards[threadID].moveCount === 9) {
                                    const boardStr = renderBoard(xoBoards[threadID].board);
                                    api.sendMessage(ttt+"\n"+`‡πÄ‡∏™‡∏°‡∏≠\n\n${boardStr}`, threadID);
                                    delete xoBoards[threadID];
                                } else {
                                    xoBoards[threadID].turn = xoBoards[threadID].turn === "ùêó" ? "ùêé" : "ùêó";
                                    const boardStr = renderBoard(xoBoards[threadID].board);
                                    api.sendMessage(ttt+"\n"+`‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á ${xoBoards[threadID].turn}\n\n${boardStr}`, threadID);
                                }
                            }
                        } else {
                            fs.readFile("key.txt", "utf8", (err, data) => {
                                if (err) {
                                    console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", err);
                                    return;
                                }
                                const lines = data.split("\n").filter(line => line.trim() !== "");
                                if (randomMessageEnabled[message.threadID]) {
                                    const randomIndex = Math.floor(Math.random() * lines.length);
                                    const randomMessage = lines[randomIndex];
                                    api.sendMessage(randomMessage, message.threadID, message.messageID);
                                }
                            });
                        }

                    }
                }
            });
        });
    });
});

function saveUserPoints() {
    const data = Object.entries(userPoints)
        .map(([user, point]) => `${user},${point}`)
        .join("\n");

    fs.writeFile("point.txt", data, "utf8", err => {
        if (err) {
            console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå point.txt:", err);
        }
    });
}

function renderBoard(board) {
    return `
 ${board[0]} | ${board[1]} | ${board[2]}
---+---+---
 ${board[3]} | ${board[4]} | ${board[5]}
---+---+---
 ${board[6]} | ${board[7]} | ${board[8]}
`;
}

function getWinner(board) {
    const lines = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
        [0, 4, 8], [2, 4, 6]             // ‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á‡∏°‡∏∏‡∏°
    ];
    for (let [a, b, c] of lines) {
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return board[a]; // ‡∏ä‡∏ô‡∏∞
        }
    }
    return null; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
}

function calculate(a, b, operator) {
    switch (operator) {
        case "+":
            return a + b;
        case "-":
            return a - b;
        case "*":
            return a * b;
        case "/":
            return a / b;
        default:
            return ttt+"/n"+"‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    }
}

function appendAndSaveTextToFile(text, api, message) {
    return new Promise((resolve, reject) => {
        fs.readFile("key.txt", "utf8", (err, data) => {
            if (err) {
                console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", err);
                reject(err);
                return;
            }
            const lines = data.split("\n").filter(line => line.trim() !== "");
            if (lines.includes(text)) {
                const errorMessage = ttt+"\n"+`‡∏Ñ‡∏≥ "${text}" ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`;
                reject(new Error(errorMessage));

                return;
            }
            fs.appendFile("key.txt", `${text}\n`, "utf8", err => {
                if (err) {
                    console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", err);
                    reject(err);
                    return;
                }
                fs.writeFile("key.txt", data + `${text}\n`, "utf8", err => {
                    if (err) {
                        console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå:", err);
                        reject(err);
                        return;
                    }
                    const successMessage = ttt+"\n"+`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥ "${text}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
                    resolve(successMessage);
                });
            });
        });
    });
}

function deleteWordFromFile(wordToDelete, api, message) {
    return new Promise((resolve, reject) => {
        fs.readFile("key.txt", "utf8", (err, data) => {
            if (err) {
                console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", err);
                reject(err);
                return;
            }
            let lines = data.split("\n").filter(line => line.trim() !== "");
            if (!lines.includes(wordToDelete)) {
                const errorMessage = ttt+"\n"+`‡∏Ñ‡∏≥ "${wordToDelete}" ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
                reject(new Error(errorMessage));
                return;
            }
            lines = lines.filter(line => line.trim() !== wordToDelete);
            const updatedData = lines.join("\n") + "\n";
            fs.writeFile("key.txt", updatedData, "utf8", err => {
                if (err) {
                    console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥:", err);
                    reject(err);
                    return;
                }
                const successMessage = ttt+"\n"+`‡∏•‡∏ö‡∏Ñ‡∏≥ "${wordToDelete}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`;
                resolve(successMessage);
            });
        });
    });
}

function appendAndSaveTextToFileid(text, api, message) {
    return new Promise((resolve, reject) => {
        fs.readFile("threadID.txt", "utf8", (err, data) => {
            if (err) {
                console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", err);
                reject(err);
                return;
            }
            const lines = data.split("\n").filter(line => line.trim() !== "");
            if (lines.includes(text)) {
                const errorMessage = ttt+"\n"+`‡πÄ‡∏ò‡∏£‡∏î "${text}" ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`;
                reject(new Error(errorMessage));

                return;
            }
            fs.appendFile("threadID.txt", `${text}\n`, "utf8", err => {
                if (err) {
                    console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ò‡∏£‡∏î:", err);
                    reject(err);
                    return;
                }
                fs.writeFile("threadID.txt", data + `${text}\n`, "utf8", err => {
                    if (err) {
                        console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå:", err);
                        reject(err);
                        return;
                    }
                    const successMessage = ttt+"\n"+`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ò‡∏£‡∏î "${text}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
                    resolve(successMessage);
                });
            });
        });
    });
}

function deleteWordFromFileid(wordToDelete, api, message) {
    return new Promise((resolve, reject) => {
        fs.readFile("threadID.txt", "utf8", (err, data) => {
            if (err) {
                console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", err);
                reject(err);
                return;
            }
            let lines = data.split("\n").filter(line => line.trim() !== "");
            if (!lines.includes(wordToDelete)) {
                const errorMessage = ttt+"\n"+`‡πÄ‡∏ò‡∏£‡∏î "${wordToDelete}" ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
                reject(new Error(errorMessage));
                return;
            }
            lines = lines.filter(line => line.trim() !== wordToDelete);
            const updatedData = lines.join("\n") + "\n";
            fs.writeFile("threadID.txt", updatedData, "utf8", err => {
                if (err) {
                    console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ò‡∏£‡∏î:", err);
                    reject(err);
                    return;
                }
                const successMessage = ttt+"\n"+`‡∏•‡∏ö‡πÄ‡∏ò‡∏£‡∏î "${wordToDelete}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`;
                resolve(successMessage);
            });
        });
    });
}

async function getWeatherData(city) {
    const fetch = await import('node-fetch').then(module => module.default);
    const apiKey = '2606f769271b8d545fe3458b2b72ed9f';
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    try {
        const response = await fetch(apiUrl);
        const data = await response.json();
        if (data.cod === 200) {
            return data;
        } else {
            console.error(ttt+"\n"+`Error: ${data.message}`);
            return null;
        }
    } catch (error) {
        console.error(ttt+"\n"+'Error fetching data:', error);
        return null;
    }
}

function createResponseMessage(weatherData) {
    const {
        name: cityName,
        main: { temp: temperature, temp_max: tempMax, temp_min: tempMin, feels_like: feelsLike, pressure, humidity },
        sys: { country, sunrise, sunset },
        coord: { lon, lat },
        weather: [{ main }]
    } = weatherData;

    const responseMessage = ttt+"\n"+`‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ${country}
‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á: ${cityName}
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature}¬∞C
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${tempMax}¬∞C
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: ${tempMin}¬∞C
‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô: ${feelsLike}¬∞C
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®: ${pressure} hPa
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}%
‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: ${lat}
‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: ${lon}
‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${main}
‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô: ${new Date(sunrise * 1000).toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' })}
‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ï‡∏Å: ${new Date(sunset * 1000).toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' })}`;

    return responseMessage;
}

function generateRandomNumbers(count) {
    const numbers = [];
    for (let i = 0; i < count; i++) {
        numbers.push(Math.floor(Math.random() * 10));
    }
    return numbers;
}

function isLink(text) {
    const linkRegex = /(http|https):\/\/[^\s$.?#].[^\s]*$/;
    return linkRegex.test(text);
}

function textToSpeech0(text, api, threadID, messageID) {
    const language = 'th';
    const ttsUrl = googleTTS.getAudioUrl(text, { lang: language, slow: false, host: 'https://translate.google.com', splitPunct: false });

    const download = (url, dest, cb) => {
        const file = fs.createWriteStream(dest);
        const sendFile = () => {
            api.sendMessage({ attachment: fs.createReadStream(dest) }, threadID, () => {
                fs.unlinkSync(dest);
                if (cb) cb();
            });
        };
        https.get(url, (response) => {
            response.pipe(file);
            file.on('finish', () => {
                file.close(sendFile);
            });
        }).on('error', (err) => {
            fs.unlinkSync(dest);
            console.error(ttt+"\n"+"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå:", err.message);
        });
    };

    download(ttsUrl, 'tts.mp3');
}